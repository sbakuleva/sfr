
R version 3.4.0 (2017-04-21) -- "You Stupid Darkness"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> suppressPackageStartupMessages(library(sf))
> # nc = st_read(system.file("gpkg/nc.gpkg", package="sf"))
> nc = st_read(system.file("shape/nc.shp", package="sf"), quiet = TRUE)
> nc_checked = st_transform(nc, 32119, check = TRUE)
> ncm = st_transform(nc, 32119)
> 
> x = st_transform(nc[1:10,], 32119)
> st_distance(x)
Units: m
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]     [,7]
 [1,]      0.00      0.00  25652.53 440561.15 299772.18 361529.53 419671.2
 [2,]      0.00      0.00      0.00 409428.54 268944.31 332589.77 388544.5
 [3,]  25652.53      0.00      0.00 367555.48 227017.51 290297.10 346667.9
 [4,] 440561.15 409428.54 367555.48      0.00  67226.86  45537.55      0.0
 [5,] 299772.18 268944.31 227017.51  67226.86      0.00      0.00  46527.4
 [6,] 361529.53 332589.77 290297.10  45537.55      0.00      0.00  30213.0
 [7,] 419671.16 388544.52 346667.93      0.00  46527.40  30213.00      0.0
 [8,] 384592.90 354294.11 312350.68  16130.34  11926.81      0.00      0.0
 [9,] 262354.29 231217.49 189310.35 140455.87      0.00  64606.24 119563.7
[10,]  71139.29  41943.83      0.00 330751.39 190182.39 252372.06 309862.0
           [,8]      [,9]     [,10]
 [1,] 384592.90 262354.29  71139.29
 [2,] 354294.11 231217.49  41943.83
 [3,] 312350.68 189310.35      0.00
 [4,]  16130.34 140455.87 330751.39
 [5,]  11926.81      0.00 190182.39
 [6,]      0.00  64606.24 252372.06
 [7,]      0.00 119563.73 309861.97
 [8,]      0.00  85533.12 275389.78
 [9,]  85533.12      0.00 152488.92
[10,] 275389.78 152488.92      0.00
> 
> st_is_valid(nc)
  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [31] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [46] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [61] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [76] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [91] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
> 
> ops = c("intersects", "disjoint", "touches", "crosses", "within", "contains", "overlaps", "equals", 
+ "covers", "covered_by", "equals_exact")
> for (op in ops) {
+ 	x = sf:::st_geos_binop(op, ncm[1:50,], ncm[51:100,], 0, NA_character_, FALSE)
+ 	x = sf:::st_geos_binop(op, ncm[1:50,], ncm[51:100,], 0, NA_character_, TRUE)
+ }
> 
> ops = c("intersects", "disjoint", "touches", "crosses", "within", "contains", "overlaps",
+ "covers", "covered_by")
> df = data.frame(ops = ops)
> df$equal = NA
> for (op in ops)
+ 	df[df$ops == op, "equal"] = identical(
+ 		sf:::st_geos_binop(op, ncm[1:50,], ncm[51:100,], 0, NA_character_, TRUE, FALSE),
+ 		sf:::st_geos_binop(op, ncm[1:50,], ncm[51:100,], 0, NA_character_, TRUE,  TRUE)
+ 	)
> df	
         ops equal
1 intersects  TRUE
2   disjoint  TRUE
3    touches  TRUE
4    crosses  TRUE
5     within  TRUE
6   contains  TRUE
7   overlaps  TRUE
8     covers  TRUE
9 covered_by  TRUE
> 
> st_contains_properly(ncm[1:3,], ncm[1:3])
[[1]]
integer(0)

[[2]]
integer(0)

[[3]]
integer(0)

> 
> st_combine(nc)
Geometry set for 1 feature 
geometry type:  MULTIPOLYGON
dimension:      XY
bbox:           xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965
epsg (SRID):    4267
proj4string:    +proj=longlat +datum=NAD27 +no_defs
MULTIPOLYGON(((-81.4727554321289 36.23435592651...
> 
> st_dimension(st_sfc(st_point(0:1), st_linestring(rbind(c(0,0),c(1,1))), 
+ 	st_polygon(list(rbind(c(0,0), c(1,0), c(1,1), c(0,1), c(0,0))))))
[1] 0 1 2
> 
> g = st_make_grid(nc)
> x = st_intersection(nc, g)
Warning message:
attribute variables are assumed to be spatially constant throughout all geometries 
> x = st_intersection(g, nc)
> 
> ls = st_sfc(st_linestring(rbind(c(0,0),c(0,1))),
+ st_linestring(rbind(c(0,0),c(10,0))))
> 
> set.seed(13531) # make reproducible
> 
> st_line_sample(ls, density = 1, type = "random")
Geometry set for 2 features 
geometry type:  MULTIPOINT
dimension:      XY
bbox:           xmin: 0 ymin: 0 xmax: 6.880179 ymax: 0.8878369
epsg (SRID):    NA
proj4string:    NA
MULTIPOINT(0 0.887836897512898)
MULTIPOINT(0.298648830503225 0, 2.4841704731807...
> 
> g = st_make_grid(nc, n = c(20,10))
> 
> a1 = st_interpolate_aw(nc["BIR74"], g, FALSE)
Warning message:
In st_interpolate_aw(nc["BIR74"], g, FALSE) :
  st_interpolate_aw assumes attributes are constant over areas of x
> sum(a1$BIR74) / sum(nc$BIR74) # not close to one: property is assumed spatially intensive
[1] 1.20742
> a2 = st_interpolate_aw(nc["BIR74"], g, extensive = TRUE)
Warning message:
In st_interpolate_aw(nc["BIR74"], g, extensive = TRUE) :
  st_interpolate_aw assumes attributes are constant over areas of x
> sum(a2$BIR74) / sum(nc$BIR74)
[1] 1.000013
> 
> # missing x:
> g = st_make_grid(offset = c(0,0), cellsize = c(1,1), n = c(10,10))
> g = st_make_grid(what = "centers")
> length(g)
[1] 648
> g = st_make_grid(what = "corners")
> length(g)
[1] 703
> 
> mls = st_multilinestring(list(rbind(c(0,0), c(1,1)), rbind(c(2,0), c(1,1))))
> st_line_merge(mls)
LINESTRING(0 0, 1 1, 2 0)
> 
> if (sf_extSoftVersion()["GEOS"] >= "3.5.0") {
+  # voronoi:
+  set.seed(1)
+  x = st_multipoint(matrix(runif(10),,2))
+  box = st_polygon(list(rbind(c(0,0),c(1,0),c(1,1),c(0,1),c(0,0))))
+  v = st_sfc(st_voronoi(x, st_sfc(box)))
+  plot(v, col = 0, border = 1, axes = TRUE)
+  plot(box, add = TRUE, col = 0, border = 1) # a larger box is returned, as documented
+  plot(x, add = TRUE, col = 'red', cex=2, pch=16)
+  plot(st_intersection(st_cast(v), box)) # clip to smaller box
+  plot(x, add = TRUE, col = 'red', cex=2, pch=16)
+ 
+  v = st_voronoi(x)
+  print(class(v))
+  v = st_sfc(st_voronoi(st_sfc(x)))
+  print(class(v))
+  v = st_voronoi(st_sf(a = 1, geom = st_sfc(x)))
+  print(class(v))
+ }
[1] "XY"                 "GEOMETRYCOLLECTION" "sfg"               
[1] "sfc_GEOMETRYCOLLECTION" "sfc"                   
[1] "sf"         "data.frame"
> 
> i = st_intersects(ncm, ncm)
> j = sf:::CPL_invert_sparse_incidence(i, 100)
> all.equal(i, sf:::CPL_invert_sparse_incidence(j, 100))
[1] TRUE
> 
> # check use of pattern in st_relate:
> sfc = st_sfc(st_point(c(0,0)), st_point(c(3,3)))
> grd = st_make_grid(sfc, n = c(3,3))
> st_intersects(grd)
[[1]]
[1] 1 2 4 5

[[2]]
[1] 1 2 3 4 5 6

[[3]]
[1] 2 3 5 6

[[4]]
[1] 1 2 4 5 7 8

[[5]]
[1] 1 2 3 4 5 6 7 8 9

[[6]]
[1] 2 3 5 6 8 9

[[7]]
[1] 4 5 7 8

[[8]]
[1] 4 5 6 7 8 9

[[9]]
[1] 5 6 8 9

> st_relate(grd, pattern = "****1****")
[[1]]
[1] 1 2 4

[[2]]
[1] 1 2 3 5

[[3]]
[1] 2 3 6

[[4]]
[1] 1 4 5 7

[[5]]
[1] 2 4 5 6 8

[[6]]
[1] 3 5 6 9

[[7]]
[1] 4 7 8

[[8]]
[1] 5 7 8 9

[[9]]
[1] 6 8 9

> st_relate(grd, pattern = "****0****")
[[1]]
[1] 5

[[2]]
[1] 4 6

[[3]]
[1] 5

[[4]]
[1] 2 8

[[5]]
[1] 1 3 7 9

[[6]]
[1] 2 8

[[7]]
[1] 5

[[8]]
[1] 4 6

[[9]]
[1] 5

> st_rook = function(a, b = a) st_relate(a, b, pattern = "F***1****")
> st_rook(grd)
[[1]]
[1] 2 4

[[2]]
[1] 1 3 5

[[3]]
[1] 2 6

[[4]]
[1] 1 5 7

[[5]]
[1] 2 4 6 8

[[6]]
[1] 3 5 9

[[7]]
[1] 4 8

[[8]]
[1] 5 7 9

[[9]]
[1] 6 8

> 
> proc.time()
   user  system elapsed 
   2.86    0.30    2.85 
